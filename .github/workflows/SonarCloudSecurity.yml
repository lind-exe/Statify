name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Install dotnet-coverage tool
        run: dotnet tool install --global dotnet-coverage

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"lind-exe_Statify" /o:"lind-exe" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          dotnet build --no-incremental
          dotnet test # Run your tests

          # Collect coverage using dotnet-coverage in Cobertura format and output to coverage.xml
          dotnet-coverage collect "dotnet test" -f cobertura -o "coverage.xml"

          # Check exit code of the coverage collection command
          if ($LastExitCode -ne 0) {
            Write-Host "Failed to collect coverage. Continuing without failing the workflow."
          }

          # Display content of coverage.xml for debugging purposes (optional)
          Get-Content -Path "coverage.xml"

          # End SonarCloud analysis
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
